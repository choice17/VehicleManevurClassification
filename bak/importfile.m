function [attriTable] = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [REAL_TIME,HR,SCL,SPEEDMPH,GPSLONGDEGS,GPSLATDEGS,GPSHEADINGDEGS,LONGACCELG,LATACCELG,VECTORACCELG,VERTACCELG]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [REAL_TIME,HR,SCL,SPEEDMPH,GPSLONGDEGS,GPSLATDEGS,GPSHEADINGDEGS,LONGACCELG,LATACCELG,VECTORACCELG,VERTACCELG]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [real_time,hr,scl,speedmph,GPSlongdegs,GPSlatdegs,GPSheadingdegs,longaccelg,lataccelg,vectoraccelg,vertaccelg] = importfile('Trip1-synchronized.csv',1, 24492);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/11/20 14:20:16

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%s%*s%s%*s%*s%*s%*s%*s%*s%s%*s%*s%*s%*s%*s%*s%*s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,7,8,9,10,11]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(2:end, [2,3,4,5,6,7,8,9,10,11]);
rawCellColumns = raw(2:end, 1);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
dateformat = 'mm/dd/yyyy  HH:MM:SS.FFF';
real_time = datenum(rawCellColumns(:, 1),dateformat);
hr = cell2mat(rawNumericColumns(:, 1));
scl = cell2mat(rawNumericColumns(:, 2));
speedmph = cell2mat(rawNumericColumns(:, 3));
GPSlongdegs = cell2mat(rawNumericColumns(:, 4));
GPSlatdegs = cell2mat(rawNumericColumns(:, 5));
GPSheadingdegs = cell2mat(rawNumericColumns(:, 6));
longaccelg = cell2mat(rawNumericColumns(:, 7));
lataccelg = cell2mat(rawNumericColumns(:, 8));
%vectoraccelg = cell2mat(rawNumericColumns(:, 9));
vertaccelg = cell2mat(rawNumericColumns(:, 10));

attri_name = {'real_time','GPSlatdegs','GPSlongdegs','GPSheadingdegs', ...
    'longaccelg','lataccelg','vertaccelg','speedmph','hr','scl'};
try 
    attri_value = [real_time GPSlatdegs GPSlongdegs GPSheadingdegs , ...
        longaccelg lataccelg vertaccelg speedmph hr scl];
catch
    display(['please check ' filename]);
end
    
attriTable = array2table(attri_value,'VariableNames',attri_name);


